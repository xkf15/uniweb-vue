{"version":3,"sources":["../../../src/js/main.js"],"names":["canvas","document","getElementById","ctx","getContext","width","window","innerWidth","height","innerHeight","moon","stars","meteors","count","meteorGenerator","x","Math","random","push","setTimeout","frame","blink","draw","forEach","meteor","index","arr","flow","splice","requestAnimationFrame"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,SAASC,SAASC,cAAT,CAAwB,QAAxB,CAAb;AAAA,IACIC,MAAMH,OAAOI,UAAP,CAAkB,IAAlB,CADV;AAAA,IAEIC,QAAQC,OAAOC,UAFnB;AAAA,IAGIC,SAASF,OAAOG,WAHpB;AAAA,IAKIC,OAAO,mBAASP,GAAT,EAAcE,KAAd,EAAqBG,MAArB,CALX;AAAA,IAMIG,QAAQ,oBAAUR,GAAV,EAAeE,KAAf,EAAsBG,MAAtB,EAA8B,GAA9B,CANZ;AAAA,IAOII,UAAU,EAPd;AAAA,IAQIC,QAAQ,CARZ;;AAUAb,OAAOK,KAAP,GAAeA,KAAf;AACAL,OAAOQ,MAAP,GAAgBA,MAAhB;;AAGA,IAAMM,kBAAkB,SAAlBA,eAAkB,GAAK;AAEzB,QAAIC,IAAIC,KAAKC,MAAL,KAAgBZ,KAAhB,GAAwB,GAAhC;AACAO,YAAQM,IAAR,CAAa,qBAAWf,GAAX,EAAgBY,CAAhB,EAAmBP,MAAnB,CAAb;;AAGAW,eAAW,YAAK;AACZL;AACH,KAFD,EAEGE,KAAKC,MAAL,KAAgB,IAFnB;AAGH,CATD;;AAYA,IAAMG,QAAQ,SAARA,KAAQ,GAAK;AAEfP;AACAA,YAAQ,EAAR,KAAe,CAAf,IAAoBF,MAAMU,KAAN,EAApB;;AAEAX,SAAKY,IAAL;AACAX,UAAMW,IAAN;;AAEAV,YAAQW,OAAR,CAAgB,UAACC,MAAD,EAASC,KAAT,EAAgBC,GAAhB,EAAuB;AAEnC,YAAIF,OAAOG,IAAP,EAAJ,EAAmB;AACfH,mBAAOF,IAAP;AACH,SAFD,MAEO;AACHI,gBAAIE,MAAJ,CAAWH,KAAX,EAAkB,CAAlB;AACH;AACJ,KAPD;AAQAI,0BAAsBT,KAAtB;AACH,CAjBD;;AAmBAN;AACAM","file":"main.js","sourcesContent":["import Stars    from './Stars'\nimport Moon     from './Moon'\nimport Meteor   from './Meteor'\n\nlet canvas = document.getElementById('canvas'),\n    ctx = canvas.getContext('2d'),\n    width = window.innerWidth,\n    height = window.innerHeight,\n    //实例化月亮和星星。流星是随机时间生成，所以只初始化数组\n    moon = new Moon(ctx, width, height),\n    stars = new Stars(ctx, width, height, 200),\n    meteors = [],\n    count = 0\n\ncanvas.width = width\ncanvas.height = height\n\n//流星生成函数\nconst meteorGenerator = ()=> {\n    //x位置偏移，以免经过月亮\n    let x = Math.random() * width + 800\n    meteors.push(new Meteor(ctx, x, height))\n\n    //每隔随机时间，生成新流星\n    setTimeout(()=> {\n        meteorGenerator()\n    }, Math.random() * 2000)\n}\n\n//每一帧动画生成函数\nconst frame = ()=> {\n    //每隔10帧星星闪烁一次，节省计算资源\n    count++\n    count % 10 === 0 && stars.blink()\n\n    moon.draw()\n    stars.draw()\n\n    meteors.forEach((meteor, index, arr)=> {\n        //如果流星离开视野之内，销毁流星实例，回收内存\n        if (meteor.flow()) {\n            meteor.draw()\n        } else {\n            arr.splice(index, 1)\n        }\n    })\n    requestAnimationFrame(frame)\n}\n\nmeteorGenerator()\nframe()\n\n"]}